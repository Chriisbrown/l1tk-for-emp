-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity InputRouterTop_IR_DTC_PS10G_3_B is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    hInputStubs_V_dout : IN STD_LOGIC_VECTOR (38 downto 0);
    hInputStubs_V_empty_n : IN STD_LOGIC;
    hInputStubs_V_read : OUT STD_LOGIC;
    bx_V : IN STD_LOGIC_VECTOR (2 downto 0);
    bx_o_V : OUT STD_LOGIC_VECTOR (2 downto 0);
    bx_o_V_ap_vld : OUT STD_LOGIC;
    hOutputStubs_0_dataarray_data_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    hOutputStubs_0_dataarray_data_V_ce0 : OUT STD_LOGIC;
    hOutputStubs_0_dataarray_data_V_we0 : OUT STD_LOGIC;
    hOutputStubs_0_dataarray_data_V_d0 : OUT STD_LOGIC_VECTOR (35 downto 0) );
end;


architecture behav of InputRouterTop_IR_DTC_PS10G_3_B is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "InputRouterTop_IR_DTC_PS10G_3_B,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2104-2L-e,HLS_INPUT_CLOCK=4.167000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.614875,HLS_SYN_LAT=108,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=75,HLS_SYN_LUT=205,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv39_0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv7_6B : STD_LOGIC_VECTOR (6 downto 0) := "1101011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln240_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal bx_o_V_1_ack_in : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal bx_o_V_1_data_reg : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal bx_o_V_1_vld_reg : STD_LOGIC := '0';
    signal bx_o_V_1_vld_in : STD_LOGIC;
    signal hInputStubs_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal do_init_reg_128 : STD_LOGIC_VECTOR (0 downto 0);
    signal bx_V3_rewind_reg_144 : STD_LOGIC_VECTOR (2 downto 0);
    signal cStubCounter_0_i2_reg_158 : STD_LOGIC_VECTOR (6 downto 0);
    signal bx_V3_phi_reg_172 : STD_LOGIC_VECTOR (2 downto 0);
    signal hEntries_V1_reg_187 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln879_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_273 : STD_LOGIC_VECTOR (0 downto 0);
    signal cStubCounter_fu_222_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal cStubCounter_reg_277 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln647_fu_228_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln647_reg_282 : STD_LOGIC_VECTOR (0 downto 0);
    signal hAStub_data_V_reg_286 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln321_fu_242_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln321_reg_291 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln240_reg_296 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_do_init_phi_fu_132_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_bx_V3_rewind_phi_fu_148_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_cStubCounter_0_i2_phi_fu_162_p6 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_bx_V3_phi_phi_fu_177_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_reg_pp0_iter0_bx_V3_phi_reg_172 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_hEntries_V_phi_fu_205_p6 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_reg_pp0_iter1_hEntries_V_reg_201 : STD_LOGIC_VECTOR (6 downto 0);
    signal hNStubs_0_V_fu_252_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln321_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_2_fu_259_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_135 : BOOLEAN;
    signal ap_condition_52 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bx_V3_phi_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_52)) then
                if ((ap_phi_mux_do_init_phi_fu_132_p6 = ap_const_lv1_0)) then 
                    bx_V3_phi_reg_172 <= ap_phi_mux_bx_V3_rewind_phi_fu_148_p6;
                elsif ((ap_phi_mux_do_init_phi_fu_132_p6 = ap_const_lv1_1)) then 
                    bx_V3_phi_reg_172 <= bx_V;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    bx_V3_phi_reg_172 <= ap_phi_reg_pp0_iter0_bx_V3_phi_reg_172;
                end if;
            end if; 
        end if;
    end process;

    bx_o_V_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (bx_o_V_1_vld_reg = ap_const_logic_0) and (bx_o_V_1_vld_in = ap_const_logic_1))) then 
                bx_o_V_1_vld_reg <= ap_const_logic_1;
            elsif (((bx_o_V_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (bx_o_V_1_vld_reg = ap_const_logic_1))) then 
                bx_o_V_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    cStubCounter_0_i2_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln240_reg_296 = ap_const_lv1_0))) then 
                cStubCounter_0_i2_reg_158 <= cStubCounter_reg_277;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln240_reg_296 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                cStubCounter_0_i2_reg_158 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    do_init_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln240_reg_296 = ap_const_lv1_0))) then 
                do_init_reg_128 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln240_reg_296 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_128 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    hEntries_V1_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln240_reg_296 = ap_const_lv1_0))) then 
                hEntries_V1_reg_187 <= ap_phi_mux_hEntries_V_phi_fu_205_p6;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln240_reg_296 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                hEntries_V1_reg_187 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln240_reg_296 = ap_const_lv1_0))) then
                bx_V3_rewind_reg_144 <= bx_V3_phi_reg_172;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (bx_o_V_1_vld_reg = ap_const_logic_0) and (bx_o_V_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (bx_o_V_1_vld_in = ap_const_logic_1) and (bx_o_V_1_vld_reg = ap_const_logic_1)))) then
                bx_o_V_1_data_reg <= ap_phi_mux_bx_V3_phi_phi_fu_177_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cStubCounter_reg_277 <= cStubCounter_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln647_fu_228_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln879_fu_216_p2 = ap_const_lv1_0))) then
                hAStub_data_V_reg_286 <= hInputStubs_V_dout(38 downto 3);
                trunc_ln321_reg_291 <= trunc_ln321_fu_242_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln240_reg_296 <= icmp_ln240_fu_246_p2;
                icmp_ln879_reg_273 <= icmp_ln879_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln879_fu_216_p2 = ap_const_lv1_0))) then
                trunc_ln647_reg_282 <= trunc_ln647_fu_228_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, hInputStubs_V_empty_n, bx_o_V_1_ack_in, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= (((bx_o_V_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((hInputStubs_V_empty_n = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, hInputStubs_V_empty_n, bx_o_V_1_ack_in, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= (((bx_o_V_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((hInputStubs_V_empty_n = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, hInputStubs_V_empty_n, bx_o_V_1_ack_in, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= (((bx_o_V_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((hInputStubs_V_empty_n = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(hInputStubs_V_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (hInputStubs_V_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(bx_o_V_1_ack_in)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (bx_o_V_1_ack_in = ap_const_logic_0);
    end process;


    ap_condition_135_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_135 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_52_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_52 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln240_reg_296)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln240_reg_296 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_bx_V3_phi_phi_fu_177_p4_assign_proc : process(bx_V, ap_phi_mux_do_init_phi_fu_132_p6, ap_phi_mux_bx_V3_rewind_phi_fu_148_p6, ap_phi_reg_pp0_iter0_bx_V3_phi_reg_172)
    begin
        if ((ap_phi_mux_do_init_phi_fu_132_p6 = ap_const_lv1_0)) then 
            ap_phi_mux_bx_V3_phi_phi_fu_177_p4 <= ap_phi_mux_bx_V3_rewind_phi_fu_148_p6;
        elsif ((ap_phi_mux_do_init_phi_fu_132_p6 = ap_const_lv1_1)) then 
            ap_phi_mux_bx_V3_phi_phi_fu_177_p4 <= bx_V;
        else 
            ap_phi_mux_bx_V3_phi_phi_fu_177_p4 <= ap_phi_reg_pp0_iter0_bx_V3_phi_reg_172;
        end if; 
    end process;


    ap_phi_mux_bx_V3_rewind_phi_fu_148_p6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, bx_V3_rewind_reg_144, bx_V3_phi_reg_172, icmp_ln240_reg_296)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln240_reg_296 = ap_const_lv1_0))) then 
            ap_phi_mux_bx_V3_rewind_phi_fu_148_p6 <= bx_V3_phi_reg_172;
        else 
            ap_phi_mux_bx_V3_rewind_phi_fu_148_p6 <= bx_V3_rewind_reg_144;
        end if; 
    end process;


    ap_phi_mux_cStubCounter_0_i2_phi_fu_162_p6_assign_proc : process(cStubCounter_0_i2_reg_158, cStubCounter_reg_277, icmp_ln240_reg_296, ap_condition_135)
    begin
        if ((ap_const_boolean_1 = ap_condition_135)) then
            if ((icmp_ln240_reg_296 = ap_const_lv1_1)) then 
                ap_phi_mux_cStubCounter_0_i2_phi_fu_162_p6 <= ap_const_lv7_0;
            elsif ((icmp_ln240_reg_296 = ap_const_lv1_0)) then 
                ap_phi_mux_cStubCounter_0_i2_phi_fu_162_p6 <= cStubCounter_reg_277;
            else 
                ap_phi_mux_cStubCounter_0_i2_phi_fu_162_p6 <= cStubCounter_0_i2_reg_158;
            end if;
        else 
            ap_phi_mux_cStubCounter_0_i2_phi_fu_162_p6 <= cStubCounter_0_i2_reg_158;
        end if; 
    end process;


    ap_phi_mux_do_init_phi_fu_132_p6_assign_proc : process(do_init_reg_128, icmp_ln240_reg_296, ap_condition_135)
    begin
        if ((ap_const_boolean_1 = ap_condition_135)) then
            if ((icmp_ln240_reg_296 = ap_const_lv1_1)) then 
                ap_phi_mux_do_init_phi_fu_132_p6 <= ap_const_lv1_1;
            elsif ((icmp_ln240_reg_296 = ap_const_lv1_0)) then 
                ap_phi_mux_do_init_phi_fu_132_p6 <= ap_const_lv1_0;
            else 
                ap_phi_mux_do_init_phi_fu_132_p6 <= do_init_reg_128;
            end if;
        else 
            ap_phi_mux_do_init_phi_fu_132_p6 <= do_init_reg_128;
        end if; 
    end process;


    ap_phi_mux_hEntries_V_phi_fu_205_p6_assign_proc : process(hEntries_V1_reg_187, icmp_ln879_reg_273, trunc_ln647_reg_282, ap_phi_reg_pp0_iter1_hEntries_V_reg_201, hNStubs_0_V_fu_252_p2)
    begin
        if (((trunc_ln647_reg_282 = ap_const_lv1_1) and (icmp_ln879_reg_273 = ap_const_lv1_0))) then 
            ap_phi_mux_hEntries_V_phi_fu_205_p6 <= hNStubs_0_V_fu_252_p2;
        elsif (((icmp_ln879_reg_273 = ap_const_lv1_1) or ((trunc_ln647_reg_282 = ap_const_lv1_0) and (icmp_ln879_reg_273 = ap_const_lv1_0)))) then 
            ap_phi_mux_hEntries_V_phi_fu_205_p6 <= hEntries_V1_reg_187;
        else 
            ap_phi_mux_hEntries_V_phi_fu_205_p6 <= ap_phi_reg_pp0_iter1_hEntries_V_reg_201;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_bx_V3_phi_reg_172 <= "XXX";
    ap_phi_reg_pp0_iter1_hEntries_V_reg_201 <= "XXXXXXX";

    ap_ready_assign_proc : process(ap_start, icmp_ln240_fu_246_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln240_fu_246_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    bx_o_V <= bx_o_V_1_data_reg;

    bx_o_V_1_ack_in_assign_proc : process(bx_o_V_1_vld_reg)
    begin
        if (((bx_o_V_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (bx_o_V_1_vld_reg = ap_const_logic_1)))) then 
            bx_o_V_1_ack_in <= ap_const_logic_1;
        else 
            bx_o_V_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    bx_o_V_1_vld_in_assign_proc : process(ap_start, icmp_ln240_fu_246_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln240_fu_246_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bx_o_V_1_vld_in <= ap_const_logic_1;
        else 
            bx_o_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    bx_o_V_ap_vld <= bx_o_V_1_vld_reg;
    cStubCounter_fu_222_p2 <= std_logic_vector(unsigned(ap_phi_mux_cStubCounter_0_i2_phi_fu_162_p6) + unsigned(ap_const_lv7_1));

    hInputStubs_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, hInputStubs_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hInputStubs_V_blk_n <= hInputStubs_V_empty_n;
        else 
            hInputStubs_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hInputStubs_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hInputStubs_V_read <= ap_const_logic_1;
        else 
            hInputStubs_V_read <= ap_const_logic_0;
        end if; 
    end process;

    hNStubs_0_V_fu_252_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(hEntries_V1_reg_187));
    hOutputStubs_0_dataarray_data_V_address0 <= zext_ln321_fu_266_p1(8 - 1 downto 0);

    hOutputStubs_0_dataarray_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hOutputStubs_0_dataarray_data_V_ce0 <= ap_const_logic_1;
        else 
            hOutputStubs_0_dataarray_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hOutputStubs_0_dataarray_data_V_d0 <= hAStub_data_V_reg_286;

    hOutputStubs_0_dataarray_data_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln879_reg_273, trunc_ln647_reg_282)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln647_reg_282 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln879_reg_273 = ap_const_lv1_0))) then 
            hOutputStubs_0_dataarray_data_V_we0 <= ap_const_logic_1;
        else 
            hOutputStubs_0_dataarray_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln240_fu_246_p2 <= "1" when (ap_phi_mux_cStubCounter_0_i2_phi_fu_162_p6 = ap_const_lv7_6B) else "0";
    icmp_ln879_fu_216_p2 <= "1" when (hInputStubs_V_dout = ap_const_lv39_0) else "0";
    tmp_2_fu_259_p3 <= (trunc_ln321_reg_291 & hEntries_V1_reg_187);
    trunc_ln321_fu_242_p1 <= ap_phi_mux_bx_V3_phi_phi_fu_177_p4(1 - 1 downto 0);
    trunc_ln647_fu_228_p1 <= hInputStubs_V_dout(1 - 1 downto 0);
    zext_ln321_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_259_p3),64));
end behav;
